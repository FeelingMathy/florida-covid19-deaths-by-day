#!/usr/bin/python3

import sys, datetime, os, math
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.dates as mdates
import numpy as np
import scipy.stats as stats
from scipy.optimize import curve_fit

data = {}

def parse_date(s):
    return datetime.datetime.strptime(s[:8], '%Y%m%d').date()

def record(as_of, date_of_death, deaths):
    if as_of not in data:
        data[as_of] = {}
    data[as_of][date_of_death] = deaths

def col(i, max_colors):
    i = min(i, max_colors - 1)
    if i < 20:
        c = plt.cm.tab20c(i)
    else:
        c = plt.cm.tab20b(i - 20)
    return c

def chart():
    max_colors = 40
    (fig, ax) = plt.subplots(dpi=300, figsize=(8, 5))
    first_date_of_death = datetime.date(2020, 5, 15)
    last_as_of = sorted(data.keys())[-1]
    last_date_of_death = sorted(data[last_as_of].keys())[-1]
    # iterate in reverse so that older (lower) bars are overlaid on top
    # of the more recent (higher) bars
    for as_of in sorted(data.keys(), reverse=True):
        x, y = [], []
        for date_of_death in sorted(data[as_of].keys()):
            if date_of_death < first_date_of_death:
                continue
            x.append(date_of_death)
            y.append(data[as_of][date_of_death])
        if not (x and y):
            continue
        i = (last_as_of - as_of).days
        if i < max_colors - 1:
            label = str(as_of)
        elif i < max_colors:
            label = 'Earlier'
        else:
            label = None
        ax.bar(x, y, color=col(i, max_colors), label=label)
    ax.grid(True, which='minor', axis='y', linewidth=0.2)
    ax.grid(True, which='major', linewidth=0.5)
    ax.spines['top'].set_visible(False)
    ax.spines['bottom'].set_visible(True)
    ax.spines['left'].set_visible(True)
    ax.spines['right'].set_visible(False)
    ax.set_ylabel('Number of deaths')
    ax.set_xlabel('Date of death')
    ax.xaxis.set_minor_locator(mdates.DayLocator())
    ax.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=mdates.MO))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    ax.yaxis.set_minor_locator(ticker.MultipleLocator(base=5))
    ax.set_xlim(left=first_date_of_death + datetime.timedelta(days=-1),
            right=last_date_of_death + datetime.timedelta(days=1))
    ax.text(1, 1, 'Deaths reported on:', transform=ax.transAxes, va='bottom', fontsize='xx-small')
    ax.legend(bbox_to_anchor=(1, 1), loc='upper left', fontsize='xx-small', ncol=1, frameon=False)
    ax.text(0, -.3,
'This chart demonstrates the significant delays in death data reporting that the Florida Department\n'
'of Health cautions about. Source: https://github.com/mbevand/florida-covid19-deaths-by-day\n'
'Created by: Marc Bevand â€” @zorinaq',
        transform=ax.transAxes, va='top', fontsize='small',
    )
    fig.autofmt_xdate()
    fig.suptitle(f'Florida COVID-19 deaths\nby exact date of death')
    fig.savefig('chart_bars.png', bbox_inches='tight')
    plt.close()

def main():
    for f in sorted(os.listdir('.')):
        if not f.endswith('.csv'):
            continue
        df = pd.read_csv(f)
        # Parse date out of "deathsbydateexport_20200623.csv"
        as_of = parse_date(f.split('_')[1])
        for _, row in df.iterrows():
            date_of_death = datetime.datetime.utcfromtimestamp(row['Date'] / 1000).date()
            if str(date_of_death) < '2020-01-01':
                continue
            record(as_of, date_of_death, int(row['Deaths']))
    chart()

if __name__ == '__main__':
    main()
